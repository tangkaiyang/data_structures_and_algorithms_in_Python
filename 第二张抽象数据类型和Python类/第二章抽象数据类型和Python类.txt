抽象数据类型的重要概念
Python面向对象的程序设计技术.可以看作是一种实现抽象数据类型的技术,但有所扩充

2.1抽象数据类型:Abstract Data Type,ADT,
ADT基本思想是抽象,或者说数据抽象(与函数定义实现的计算抽象或称过程抽象对应)
2.1.1 数据类型和数据构造
2.1.2 抽象数据类型的概念
把对象的使用与其具体实现隔离开
抽象数据单元:在编程中使用一种对象时,只需考虑应该如何使用,不需要(最好是根本不能)去关注和触及对象的内部表示.
抽象数据类型的基本想法:把数据定义为抽象的对象集合,只为他们定义可用的合法操作,并不暴露其内部实现的具体细节,
不论是其数据的表示还是操作的实现细节.
抽象数据类型提供的操作应该满足如下要求.一个数据类型的操作通常可用分为三类:
1)构造操作:基于一些已知信息,产生出这种类型的一个新对象
2)解析操作:从一个对象取得有用的信息,其结果反映了被操作对象的某方面特性,但结果并不是本类型的对象.
3)变动操作:修改被操作对象的内部状态
当然,一个抽象数据类型还应该有一个名字,用于代表这个类型
数据类型的变动性,表示该类型的对象在创建之后是否允许变化.
不变数据类型,该类型的对象称为不变对象/可变数据类型,其对象成为可变对象/简称为不变类型和可变类型
定义一个抽象数据类型时应该怎样思考问题,怎样描述抽象数据类型,描述中应该给出哪些信息
2.1.3 抽象数据类型的描述
一个简单的有理数抽象数据类型的描述:
ADT Rational:                           # 定义有理数的抽象数据类型
    Rational(int num, int den)          # 构造有理数num/den
    +(Rational r1, Rational r2)         # 求出表示r1+r2的有理数
    -(Rational r1, Rational r2)         # 求出表示r1-r2的有理数
    *(Rational r1, Rational r2)         # 求出表示r1*r2的有理数
    /(Rational r1, Rational r2)         # 求出表示r1/r2的有理数
    num(Rational r1)                    # 取得有理数r1的分子
    den(Rational r2)                    # 取得有理数r2的分母
ADT是一种思想,也是一种组织程序的技术,主要包括:
1)围绕着一类数据定义程序模块
2)模块的接口和实现分离.
3)在需要实现时,从所用的编程语言里选择一套合适的机制,采用合理的技术,实现这种ADT的功能,包括具体的数据表示和操作

2.2 Python的类
抽象数据类型的基本思想和描述技术在Python语言里的实现.
Python语言里没有直接的ADT定义,实现ADT可用采用很多不同的技术.
最自然的一种技术:利用class定义(类定义)实现抽象数据类型.
2.2.2 类定义的进阶
类定义的一类重要作用时支持创建抽象的数据类型.
约定:下划线开头的属性名(和函数名)都当作内部使用的名字,不应该在这个类之外使用.
Python对类定义里以两个下划线开头(但不以两个下划线结尾)的名字做了特殊处理,使得在类定义之外不能直接使用这个名字访问.
