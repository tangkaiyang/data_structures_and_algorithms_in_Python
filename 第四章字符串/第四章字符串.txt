文字处理是最重要的一类计算机应用.另一方面,各种计算机应用系统都需要与人交互,因此或多或少都需要处理文字信息.最基本
的文字处理是文本处理,处理对象是结构简单的语言文本,即是某种(或某些)自然语言中的基本文字符号构成的序列.在计算机
领域中,这样的基本文字符号称为字符,符号的序列称为字符串

字符集,字符串和字符串操作
讨论字符串及其数据结构实现,以及字符串处理,首先需要有一个确定的字符集.这里把字符作为一个抽象概念,字符集就是有穷
的一组字符构成的集合.在实际工作中,人们经常考虑的是计算机领域广泛使用的某种标准字符集,如ASCII字符集或者Unicode字符集.
实际上,完全可以用任意一个数据元素集合作为字符集.
基于字符串处理的需要,要求字符集上有一种确定的序关系,称为字符序,
字符串(简称串)可以看作一类特殊的线性表,表中元素取自选定的字符集.从这个角度看,字符串数据结构似乎就是一类特殊的
线性表,但实际上不尽然,因为字符串操作有其特点,而且其中许多操作并不是常见的线性操作.
对于线性表,人们经常考虑的是元素与表的关系,元素的插入和删除.而在考虑字符串时,人们关注的操作不同于一般线性表,
经常需要把字符串作为一个整体使用和处理,考虑许多以整个串为对象的操作.
字符串相关概念
# 字符串的长度:一个字符串中字符的个数称为该串的长度
# 字符在字符串里的位置:
# 字符串相等
# 字典序:字典序时字符串上的一种序关系,基于字符序定义.
从左向右看两个串中下标相同的各对字符,遇到的第一对不同字符的字符序决定了这两个字符串的顺序;
另外,如果两个串中相同下标的各对字符都相同,但其中一个串较短,那么就认为它较小,排在前面
# 字符串拼接
# 子串关系:
# 前缀和后缀时两种特殊字串
# 其他有用的串运算:串s的n次幂

字符串抽象数据类型
Python中将字符串定义为不可变类型
ADT String:
    String(self,sseq)       # 基于字符序列sseq建立一个字符串
    is_empty(self)          # 判断本字符串是否空串
    len(self)               # 取得字符串的长度
    char(self,index)        # 取得字符串中位置index的字符
    substr(self,a,b)        # 取得字符串中[a:b]的字串,左闭右开取键
    match(self,string)      # 查找串string在本字符串中第一个出现的位置
    concat(self,string)     # 做出本字符串与另一字符串string的拼接串
    subst(self,str1,str2)   # 做出将本字符串里的子串str1都替换为str2的结果串
最后两个操作可以实现为变动操作,实际修改本字符串;也可以实现为非变动操作,操作中生成满足要求的另一个字符串
子串检索操作(也称子串匹配)是字符串的核心操作

字符串的实现
字符串是字符的线性序列,可以采用线性表的各种实现技术实现,用顺序表或链接表的形式表示.
考虑字符串的表示时,需确定两个重要的方面:
1)字符串内容的存储.两个极端情况
1.把一个字符串的全部内容存储在一块连续存储区里
2.把串中每个字符单独存入一个独立存储块,并将这些块链接起来
实际中完全可以采用某种中间方式,把一个串的字符序列分段保存在一组存储块里,并链接起这些存储块
2)串结束的表示.不同字符串的长度可能不同,如果采用连续表示方式,由于存储在计算机里的都是二进制编码,从存储内容
无法判断哪里时串的结束.所有,必须采用某种方式表示字符串的结束.两种基本方式
# 用一个专门的数据域记录字符串长度,就像前面连续表中的num域;
# 用一个特殊编码表示串结束,为此需要保证该编码不代表任何字符.

串替换:
一些问题:
# 被替换串t可能在s中多次出现
# t在s里的多次出现可能有重叠
# 在完成了一次子串代换后,应该从代入的新串之后继续工作
# 无法预知s里有t的几个独立出现
实际语言中的字符串

Python的字符串
Python标准类型str可以看作抽象的字符串概念的一个实现.str时一个不变类型,其对象创建后内容和长度都不变化,但不同
str对象的长度可能不同,因此需要在对象里记录字符串长度.
在Python官方实现中,str对象采用了一体式顺序表形式.
实际上,在一个str对象的头部,除了记录字符串长度外,还记录了一些解释器用于管理对象的信息,他们是为系统内部操作服务的

字符串匹配(子串查找)
子串匹配问题也被称为字符串匹配(string matching)或者字符串查找(string searching)
有些教科书里称为模式匹配(pattern matching),但实际上,模式匹配是一个内涵更广的概念
字符串匹配就是在t中查找与p相同的子串的操作(或过程).
称t为目标串,称p为模式串
串匹配和朴素匹配算法
串匹配算法:做字符串匹配的基础是逐个比较字符
串匹配算法设计的两点关键:
# 怎样选择开始比较的字符对
# 发现不匹配后,下一步怎么做
朴素的串匹配算法:从左到右逐个字符匹配;发现不匹配时,转去考虑目标串里的下一个位置是否与模式串匹配
造成其低效的主要因素是执行中可能出现回溯:匹配遇到一对字符不同时,模式串p将右移一个字符位置,随后的匹配回到模式串
的开始(重置j=0),也回到目标串中前面的下一个位置,从那里再次由p0开始比较字符串
每次字符比较看作完全独立的操作,完全没有利用字符串本身的特点(每个字符串都是特殊的,只有有穷多个不同字符,等等),
也没用尽可能地利用前面已经做过的字符比较中得到的信息.
无回溯串匹配算法(KMP算法)
由于模式串在匹配之前已知,而且通常在匹配中反复使用,如果先对模式串做一些分析,记录得到的有用信息(如其中哪些位置
的字符相同或不同),就有可能避免一些不必要的匹配,提高匹配效率.这种做法是实际匹配前的静态预处理,只需要做一次.
记录下来的信息可以在匹配中反复使用
KMP算法的精髓就是开发了一套分析和记录模式串信息的机制(和算法),而后借助得到的信息加速匹配.
KMP算法的基本思想是匹配中不回溯.如果匹配中用模式串里的pi匹配某个tj时失败了(遇到了pj!=tj的情况),就找到某个特定
的ki(0<=ki<i),下一步用模式串中字符pki与目标串里的tj比较.也就是说,在匹配失败时把模式串前移若干位置,用模式串里
匹配失败字符之前的某个字符与目标串中匹配失败的字符比较.
KMP算法设计中的关键认识是:在pi匹配失败时,所有的pk(0<=k<i)都已经匹配成功(否则就不会考虑pi的匹配问题).这也就是说
在目标串中tj之前的i个字符也就是模式串p的前i个字符.这一情况说明,原本似乎应该根据目标串t中tj之前已匹配的一段来
决定模式串的前移位置,实际上只需根据模式串p本身的情况就可以决定了.这说明,完全可以在实际地与任何目标串匹配之前,
通过对模式串本身的分析,解决好匹配失败时应该怎样前移的问题.
确定k的问题变成确定p0....pi-1的相等前缀和后缀的长度;k值越小移动越远.
应该找的k是p0...pi-1的最长的相等前缀和后缀(不包括本身,但可以是空串)的长度
模式串右移i-k位,即把pnext[i]设置为k

递推计算最长相等前后缀的长度
许多场景中需要用一个模式串反复在一个或多个目标串里匹配.
可以考虑一个模式类型,将pnext表作为模式对象的一个成分,在以模式串作为参数构造模式对象做好对象的pnext表.实际匹配函数使用模式对象去匹配目标串.

字符串匹配问题
串匹配/搜索的不同需要
查找某种形式的字符串:考虑一组模式串,可能有穷,也可能无穷
考虑字符串集合的描述,以及对于是否属于一个字符串集合的检查
模式,字符串和串匹配(串检索)
重新定义"模式":一个模式描述了(能匹配)一些字符串(一个字符串集合)
前面讨论的模式串时这个模式概念的特例,模式串:模式的形式就是普通的字符串;每个模式描述的字符串集合都是单元素集合
,其中只包含这个字符串本身;匹配的条件就是字符串相等.
一般的模式:模式的形式是什么,描述的字符串集合如何确定,怎样做匹配.
考虑字符串集合的描述和匹配时,需要考虑两个问题:
# 为了描述(希望关注的)字符串集合,需要一种严格描述方式.这种方式应能描述很多有用的字符串集合.一种"系统化"的描
述方式,就是一种描述串模式的语言(简单字符串匹配的"模式语言"就是字符串本身)
# 如何(或者是否有可能)高效实现所希望的检查(匹配)
有意义(有价值)的模式描述语言时描述能力和处理效率之间的合理平衡

通配符和简单模式语言
通配符:DOS或Windows cmd中*代表任一字符串,?代表任一字符
正则表达式:Regular Expression,regex,regexp或RE/re
通配符!=正则表达式

一种简化的正则表达式
模式语言:考虑一种简化的正则表达式,
# 任一字符仅与本身匹配
# .可以匹配任意字符
# ^匹配开头,不匹配任何具体字符
# $匹配结尾
# *表示前面那个字符可匹配0或任意多个相同字符
^$至多在模式的开始和结束出现一次
匹配算法

Python正则表达式
标准包re
# 理解正则表达式的描述规则(语法)和效用(语义)
# 了解正则表达式的一些典型使用方法和场景
Python正则表达式采用字符串字面量的形式描述(即引号括起的字符序列)
re包的正则表达式描述形式实际上构成一个特殊的小语言:
# 语法:re包规定的一套特殊描述规则,符合这组规则的字符串就是正则表达式,可以用在re包提供的各种匹配操作中
# 语义:一个正则表达式所描述的字符串集

基本情况
原始字符串raw string,也是文字量.
r或R"string"其中反斜线"\"不作为转义符.
元字符(特殊字符):. ^ $ * + ? \ | { } [ ] ( )
除了"\"外都是普通字符,只有在把字符串作为正则表达式,用于re包提供的一些特殊操作时,这些字符才有特殊的意义
下面将把作为正则表达式使用的串称为模式串,将非特殊字符称为常规字符,
主要操作
pattern表示模式串(描述正则表达式的字符串)
string表示被处理的字符串,
repl表示替换串,即操作中使用的另一个字符串
# 生成正则表达式对象:re.compile(pattern, flag=0)
下面几个操作都能自动从pattern串生成正则表达式对象.但如果一个模式串需要反复使用,先用compile生成正则表达式对象
并记入变量,可以避免在实际使用中重复生成.
下面函数中的pattern参数,即可用模式串作为实参,也可以用正则表达式对象作为实参
# 检索:re.search(pattern, string, flag=0)
在string里检索与pattern匹配的子串.如找到就返回一个match类型的对象;否则返回None.
match对象里记录成功匹配的相关信息,可以根据需要检查和使用.
也可以把match对象简单作为真值用于逻辑判断.
# 匹配:re.match(pattern, string, flag=0)
检查string是否存在一个与pattern匹配的前缀.匹配成功返回相应的match对象,否则返回None
# 分割:re.split(pattern, string, maxsplit=0, flags=0)
以pattern作为分割串将string分段.参数maxsplit指明最大分割数,用0表示要求处理完整个string.
函数返回分割得到的字符串的表
# 找出所有匹配串:re.findall(pattern, string, flags=0)
返回一个表,表中元素是按顺序给出的string里与pattern匹配的各个子串(从左到右,非重叠的).
如果模式里只有常规字符,做这种匹配的价值不大,因为结果表里的所有字符串相同.
但用一般的正则表达式模式,情况就可能不同
正则表达式的构造
在模式串中,可以用圆括号表示结组,确定模式描述符的作用范围.
\n换行,\t表示制表符等
正则表达式中的空格也作为常规字符,因此只能与自己匹配
字符组
某些正则表达式可以与一组字符中的任何一个字符匹配.这类描述形式称为字符组描述
字符组描述符[...]:
除了可以列出一组字符外,还有其他形式
# 区间形式(顺序列出字符形式的)字符组描述的缩写形式:[0-9],[34ad-fs-z],[0-9a-zA-Z]
# 特殊形式[^..]表示^之后列出的字符组求补,这种字符组表达式与所有未列在括号里的字符匹配
如果需要在字符组里包括字符^,就不能放在第一个位置.可以放在后面,或者写\^.
圆点字符(.):圆点是"通配符",它能匹配任何字符
转义串定义的一些常用字符组:
# \d:与十进制数字匹配,[0-9]
# \D:与非十进制数字的所有字符匹配,[^0-9]
# \s:与所有空白字符匹配,[ \t\v\n\f\r]
# \S:与所有非空白字符匹配,[^ \t\v\n\f\r]
# \w:与所有字母数字字符匹配,[0-9a-zA-Z]
# \W:与所有非字母数字字符匹配,[^0-9a-zA-Z]
重复
实际中经常需要用到一个模式(或模式中一部分)的重复匹配,可能是任意多次的重复匹配或规定次数的重复匹配
重复描述符:
*:模式a*要求匹配模式a能匹配的字符串的0次或任意多次重复
模式ab*可以匹配a也可以匹配ab,那么究竟匹配哪个串呢?
一般正则表达式匹配都提供了两种可能:
# 贪婪匹配:模式与字符串里有可能匹配的最长子串匹配.re规定*运算符做贪婪匹配
# 非贪婪匹配(吝啬匹配):模式与有可能匹配的最短子串匹配.对所有重复模式描述符,Python都提供了相应的吝啬匹配描述符
+,表示其作用模式的一次或多次
可选描述符:?,a?要求与a匹配的字符串的0或1次重复匹配
重复次数描述符:确定次数的重复用{n}描述,
请注意:在许多实际情况中,人们写出的正则表达式描述的是实际字符串集合的超集.
*,?,{8}都有作用范围问题(优先级),re包规定他们都作用于最小表达式.
重复次数的范围描述符:{m,n}
重复范围描述符中的m和n是可以省略的,a{,n}等价于a{0,n},a{m,}等价于a{m,infinity}
前面几种重复描述符都可以用这种形式表示:
# a{n}等价于a{n,n},a?等价于a{0,1}
# a*等价于a{0,infinity},a+等价于a{1,infinity}
*,+,?,{m,n}都采取贪婪匹配规则,与被匹配串中最长的合适子串匹配(因为他们可能出现在更大的模式里,还需要照顾上下文的需要)
非贪婪匹配描述符:与各种贪婪重复运算符对应,这里还有一组非贪婪匹配运算符.
*?,+?,??,{m,n}?(在上述各运算符后增加一个问好),其语义与上面几个运算符分别对应,但采用非贪婪匹配(最短匹配)策略
选择
选择描述符:|描述与两种或多种情况之一的匹配
|描述符的结合力最弱,比顺序组合的结合力还弱.
首尾描述符
行首描述符:以^符号开头的模式,只能与一行的前缀子串匹配
行尾描述符:以$符号结束的模式只能与一行的后缀子串匹配
注意,一行的前缀和后缀也包含整个被匹配串的前缀和后缀.如果串里有换行符,那么还包括换行符前的子串和换行符后的子串
的前缀
串首描述符:\A开头的模式只能与整个被匹配串的前缀匹配
串尾描述符:\Z结束的模式只能与整个被匹配串的后缀匹配
14个元字符:三对括号分别用于描述优先级结合,字符组和重复次数;圆点是通配符;星号和加号表示重复;:^和$表示行首和行尾,
反斜线符号还是转义符.
单词边界
两个转义元字符,用于描述特殊子串的边界
\b描述单词边界,它在实际单词边界位置匹配空串(不匹配实际字符).单词是字母数字的任意连续序列,其边界就是
非字母数字的字符或者无字符(串的开头/结束)
一个比较糟糕的问题:在Python的字符串字面量里\b表示退格符,而在re的正则表达式里\b表示单词边界.
处理这个问题的两个方法:
1)将模式串写的\双写,这就表示把\本身送给re.compile等函数
例如'\\b123\\b'将不匹配abc123a里的123,但匹配(123,123)里的123
2)用Python原始字符串,其中的\不转义.上面模式可写为r'\b123\b'
在书写和使用正则表达式时,需要考虑被匹配对象的情况
Python把一元的正负号看作运算符,不是整数的一部分
转义元字符\B是\b的补,它也匹配空串,但要求在相应位置是字母或数字
匹配对象(match对象)
许多匹配函数在匹配成功时返回一个match对象,其中记录了所完成的匹配中得到的信息,可以根据需要取用.
首先,调用匹配操作的结果可以用于逻辑判断,匹配成功时得到的match对象总表示逻辑真,不成功得到的None自然表示假.
此外,这种match对象提供了一组方法,用于检查和使用与匹配有关的信息.
下面,mat总表示通过匹配得到的一个match对象
# 取得被匹配的子串:mat.group()
通过匹配成功得到了mat,所用的正则表达式自然与目标串里的一个子串成功匹配.通过操作mat.group()就能得到这个子串
# 在目标串里的匹配位置:mat.start()
被匹配子串开始字符的下标
# 目标串里被匹配子串的结束位置:mat.end()
mat.group() = text[mat.start():mat.end()]
被匹配串等于由start()和end()确定的切片
# 目标串里被匹配的区间:mat.span()
得到匹配的开始和结束位置形成的二元组:mat.span() == mat.start(), mat.end()
# 其他:mat.re和mat.string(这两个表达式是数据域访问,不是函数)
分别取得这个match对象所作匹配的正则表达式对象和目标串.
模式里的组(group)
在正则表达式描述中的另一个重要概念是组(group).
用圆括号括起的模式段(...)也是一个模式,在考虑匹配时,它与被括起的子模式匹配的串匹配.
还需说明一点,在此同时圆括号还确定了一个被匹配的"组"(字符段)
在一次成功匹配中,模式串里的各个组也都成功匹配,与他们匹配的那一组字符串将从1开始编号,而后可以通过方法调用
mat.group(n)获取,这里的mat时通过匹配操作得到的match对象.作为特殊情况,组0就是与整个模式匹配的字符串,
也可以简单地用mat.group()获取(可认为0是参数地默认值)
模式里各对圆括号确定地组按开括号地顺序编号.
mat = re.search('.((.)e)f', 'abcdef')
mat.group()
'cdef'
mat.group(1)
'de'
mat.group(2)
'd'
mat.groups()
('de', 'd')
组还有一个重要用途,就是在匹配中应用前面地成功匹配,建立前后的部分匹配之间的约束关系.
由成功的组匹配确定的字符串,可以在模式串的后面部分用\n的形式"引用",表示要求在该位置匹配同一子串.
这里的n是一个表示组序号的整数
例如:
r'(.{2}) \1'可以匹配字符串'ok ok'或'no no',但是不能匹配'no oh'
注意,模式串里的组编号引用应该写\1,\2等.但是,在普通字符串里,\1表示二进制编码为1的那个(特殊)字符(通常这个字符
被写成0x01,但写\1也对).而现在需要在模式串里出现\1,\2等.
为解决上述问题,上面用原始字符串形式简化写法.同样模式串的另一种写法是'(.{2}) \\1'
正则表达式对象
re.compile(pattern)生成一个正则表达式对象,这种对象可以在匹配中反复使用.
实际上,正则表达式对象本身支持另一组方法,与直接用re.method形式调用前面介绍的匹配函数相比,正则表达式对象的方法
功能更强,使用也更灵活